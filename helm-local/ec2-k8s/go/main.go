package main

import (
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"
	"strconv"
	"strings"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"

	"github.com/joho/godotenv"
)

func requestToNeptune(c echo.Context) error {

	//return c.String(http.StatusAccepted, os.Getenv("LIMIT"))
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	sparqlString := c.FormValue("sparqlstring")
	limit := c.FormValue("limit")
	limitInt, err := strconv.Atoi(limit)
	if err != nil {
		return c.String(http.StatusBadRequest, "Limit needs to be a number")
	}
	maxLimit := os.Getenv("LIMIT")
	maxLimitInt, err2 := strconv.Atoi(maxLimit)
	if err2 != nil {
		return c.String(http.StatusInternalServerError, "Max limit not a number")
	}
	var limitToUse int
	if limitInt > maxLimitInt {
		limitToUse = maxLimitInt
	} else {
		limitToUse = limitInt
	}
	//return c.String(http.StatusOK, "limit"+strconv.Itoa(limitToUse))
	//if _, err := strconv.Atoi(limit); err != nil {
	//	//return c.String(http.StatusBadRequest, "specify the limit as a number please")
	//	limit = maxLimitInt
	//	return c.String(http.StatusAccepted, "No limit suggested, setting limit to default value")
	//}
	//if limit > os.Getenv("LIMIT") {
	//	limited := os.Getenv("LIMIT")
	//	testeds, _ := fmt.Println(reflect.TypeOf(limited))
	//	return c.String(http.StatusOK, "dave"+strconv.Itoa(testeds))
	//}
	//return c.String(http.StatusOK, "Limit bigger")
	//return c.String(http.StatusOK, "limit: "+limit+"  sparql: "+sparqlString)
	params := url.Values{}
	params.Add("query", "select "+sparqlString+" limit "+strconv.Itoa(limitToUse))
	body := strings.NewReader(params.Encode())

	req, err := http.NewRequest("POST", "https://ohos-live-data-neptune.cluster-ro-c7ehmaoz3lrl.eu-west-2.neptune.amazonaws.com:8182/sparql", body)
	if err != nil {
		log.Fatal(err)
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	data, _ := ioutil.ReadAll(resp.Body)
	return c.String(http.StatusOK, string(data))
}

func main() {
	err := godotenv.Load("local.env")
	if err != nil {
		log.Fatalf("Something went wrong loading the env file")
	}

	e := echo.New()

	e.Use(middleware.Logger())
	e.Use(middleware.Recover())

	e.GET("/", func(c echo.Context) error {
		return c.HTML(http.StatusOK, "Hello, you've reached the Go API that lets you talk to the Neptune database. Well done!")
	})

	e.POST("/sparql", requestToNeptune)

	e.Logger.Fatal(e.Start(":9000"))

}
